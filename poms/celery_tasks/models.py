import json
import logging
from datetime import timedelta

from celery.result import AsyncResult
from django.core.serializers.json import DjangoJSONEncoder
from django.db import models
from django.utils.timezone import now
from django.utils.translation import gettext_lazy

from poms.common.finmars_authorizer import AuthorizerService
from poms.common.models import TimeStampedModel
from poms.file_reports.models import FileReport

_l = logging.getLogger("poms.celery_tasks")
log = "CeleryTask"


class CeleryTask(TimeStampedModel):
    """
    Maybe should be renamed just to Task (like in Workflow)
    Kinda legacy functionality (everything to background processes should
    be moved to Workflow/Olap microservices)
    But still it's in use
    Most important tasks are:
        Transaction Import (transactions itself, sometimes instruments)
        Simple Import (Portfolios, Accounts, Instruments, Prices, FxRates)
        Configuration Import (Account Type, Instrument Types, Transaction Types,
        UI layouts)
        Portfolio Records and Portfolio Prices

    Also, we have poms.procedures, and poms.pricing and somehow it different
    entities, but they do the same thing as CeleryTask
    Maybe in future procedures/pricing will be refactored and one day
    they will be just CeleryTask
    And in the far future even that will be moved to Workflow/Olap
    """

    STATUS_INIT = "I"
    STATUS_PENDING = "P"
    STATUS_DONE = "D"
    STATUS_ERROR = "E"
    STATUS_TIMEOUT = "T"
    STATUS_CANCELED = "C"
    STATUS_TRANSACTIONS_ABORTED = "X"
    STATUS_REQUEST_SENT = "S"
    STATUS_WAIT_RESPONSE = "W"

    STATUS_CHOICES = (
        (STATUS_INIT, "INIT"),
        (STATUS_PENDING, "PENDING"),
        (STATUS_DONE, "DONE"),
        (STATUS_ERROR, "ERROR"),
        (STATUS_TIMEOUT, "TIMEOUT"),
        (STATUS_CANCELED, "CANCELED"),
        (STATUS_TRANSACTIONS_ABORTED, "TRANSACTIONS_ABORTED"),
        (STATUS_REQUEST_SENT, "REQUEST_SENT"),
        (STATUS_WAIT_RESPONSE, "WAIT_RESPONSE"),
    )

    master_user = models.ForeignKey(
        "users.MasterUser",
        verbose_name=gettext_lazy("master user"),
        on_delete=models.CASCADE,
    )
    member = models.ForeignKey(
        "users.Member",
        verbose_name=gettext_lazy("member"),
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
    )
    is_system_task = models.BooleanField(
        default=False,
        verbose_name=gettext_lazy(
            "is system task",
        ),
    )
    celery_task_id = models.CharField(
        null=True,
        max_length=255,
    )
    function_name = models.CharField(
        null=True,
        max_length=255,
    )
    status = models.CharField(
        null=True,
        max_length=1,
        default=STATUS_INIT,
        choices=STATUS_CHOICES,
        verbose_name="status",
    )
    worker_name = models.CharField(
        null=True,
        max_length=255,
        verbose_name="worker name",
    )
    type = models.CharField(
        max_length=255,
        blank=True,
        null=True,
    )
    parent = models.ForeignKey(
        "self",
        null=True,
        blank=True,
        related_name="children",
        verbose_name=gettext_lazy("parent"),
        on_delete=models.SET_NULL,
    )
    options = models.TextField(
        null=True,
        blank=True,
        verbose_name=gettext_lazy("options"),
    )
    result = models.TextField(
        null=True,
        blank=True,
        verbose_name=gettext_lazy("result"),
    )
    progress = models.TextField(
        null=True,
        blank=True,
        verbose_name=gettext_lazy("progress"),
    )
    notes = models.TextField(
        null=True,
        blank=True,
        verbose_name=gettext_lazy("notes"),
    )
    error_message = models.TextField(
        null=True,
        blank=True,
        verbose_name=gettext_lazy("error message"),
    )
    file_report = models.ForeignKey(
        "file_reports.FileReport",
        null=True,
        blank=True,
        verbose_name=gettext_lazy("file report"),
        on_delete=models.SET_NULL,
    )
    verbose_name = models.CharField(
        null=True,
        max_length=255,
    )
    verbose_result = models.TextField(
        null=True,
        blank=True,
        verbose_name=gettext_lazy("verbose result"),
    )
    ttl = models.PositiveIntegerField(
        default=0,
        verbose_name=gettext_lazy("time to live"),
        help_text="Amount of time to complet task before automatic cancelation. 0 - no limit.",
    )
    expiry_at = models.DateTimeField(
        null=True,
        blank=True,
        db_index=True,
        verbose_name=gettext_lazy("expiry at"),
        help_text="Autogenerated. Task will be canceled after this time.",
    )
    finished_at = models.DateTimeField(
        null=True,
        db_index=True,
        verbose_name=gettext_lazy("finished at"),
    )

    class Meta:
        ordering = ["-created_at"]

    def __str__(self):
        return f"{self.verbose_name} [{self.pk}] ({self.status})>"

    def cancel(self):
        if self.celery_task_id:
            try:
                AsyncResult(str(self.celery_task_id)).revoke()
            except Exception as e:
                _l.error(f"{log} Error while canceling task: {repr(e)}")

        self.status = CeleryTask.STATUS_CANCELED
        self.save()

    @property
    def options_object(self):
        return None if self.options is None else json.loads(self.options)

    @options_object.setter
    def options_object(self, value):
        if value is None:
            self.options = None
        else:
            self.options = json.dumps(
                value,
                cls=DjangoJSONEncoder,
                sort_keys=True,
                indent=1,
                default=str,
            )

    @property
    def result_object(self):
        return None if self.result is None else json.loads(self.result)

    @result_object.setter
    def result_object(self, value):
        if value is None:
            self.result = None
        else:
            self.result = json.dumps(
                value,
                cls=DjangoJSONEncoder,
                sort_keys=True,
                indent=1,
                default=str,
            )

    @property
    def progress_object(self):
        return None if self.progress is None else json.loads(self.progress)

    @progress_object.setter
    def progress_object(self, value):
        if value is None:
            self.progress = None
        else:
            self.progress = json.dumps(
                value,
                cls=DjangoJSONEncoder,
                sort_keys=True,
                indent=1,
                default=str,
            )

    def add_attachment(self, file_report_id):
        CeleryTaskAttachment.objects.create(celery_task=self, file_report_id=file_report_id)

    def mark_task_as_finished(self):
        self.finished_at = now()

    def update_progress(self, progress):
        self.progress_object = progress
        self.save()

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)

        if self.ttl and not self.expiry_at:
            self.expiry_at = self.created_at + timedelta(seconds=self.ttl)

        if CeleryTask.objects.exclude(type__in=["calculate_balance_report", "calculate_pl_report"]).count() > 3000:
            _l.warning(f"{log} tasks amount > 1000, delete oldest task")
            CeleryTask.objects.exclude(type__in=["calculate_balance_report", "calculate_pl_report"]).order_by("id")[
                0
            ].delete()


class CeleryTaskAttachment(models.Model):
    celery_task = models.ForeignKey(
        CeleryTask,
        verbose_name=gettext_lazy("celery task"),
        on_delete=models.CASCADE,
        related_name="attachments",
    )
    file_url = models.TextField(
        null=True,
        blank=True,
        default="",
        verbose_name=gettext_lazy("File URL"),
    )
    file_name = models.CharField(
        null=True,
        max_length=255,
        blank=True,
        default="",
    )
    notes = models.TextField(
        null=True,
        blank=True,
        default="",
        verbose_name=gettext_lazy("notes"),
    )
    file_report = models.ForeignKey(
        FileReport,
        null=True,
        verbose_name=gettext_lazy("file report"),
        on_delete=models.SET_NULL,
    )


class CeleryWorker(TimeStampedModel):
    worker_name = models.CharField(
        unique=True,
        max_length=255,
        verbose_name="worker name",
        help_text="Name that will be used in celery worker command",
    )
    worker_type = models.CharField(
        default="worker",
        max_length=255,
        verbose_name="worker type",
        help_text="worker or scheduler",
    )
    status = models.TextField(
        null=True,
        blank=True,
        default="unknown",
        verbose_name="status",
        help_text="Status of worker container",
    )
    notes = models.TextField(
        null=True,
        blank=True,
        verbose_name=gettext_lazy("notes"),
    )
    memory_limit = models.CharField(
        null=True,
        max_length=255,
        verbose_name="Memory Limit",
        help_text="Memory limit for celery worker e.g. 2Gi",
    )
    queue = models.TextField(
        null=True,
        blank=True,
        default="backend-general-queue,backend-background-queue",
        verbose_name=gettext_lazy("Queue"),
        help_text="Comma separated list of queues that worker will listen to",
    )

    def create_worker(self, realm_code):
        authorizer_service = AuthorizerService()
        authorizer_service.create_worker(self, realm_code)

    def start(self, realm_code):
        authorizer_service = AuthorizerService()
        authorizer_service.start_worker(self, realm_code)

    def stop(self, realm_code):
        authorizer_service = AuthorizerService()
        authorizer_service.stop_worker(self, realm_code)

    def restart(self, realm_code):
        authorizer_service = AuthorizerService()
        authorizer_service.restart_worker(self, realm_code)

    def get_status(self, realm_code):
        authorizer_service = AuthorizerService()
        status = authorizer_service.get_worker_status(self, realm_code)

        try:
            self.status = json.dumps(status)
        except Exception as e:
            self.status = json.dumps({"status": "unknown", "error_message": str(e)})

        self.save()

    def delete_worker(self, realm_code):
        authorizer_service = AuthorizerService()
        authorizer_service.delete_worker(self, realm_code)
